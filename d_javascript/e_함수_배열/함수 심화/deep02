//# 콜백함수를 활용하는 JS의 '내장 함수' #//

//! '배열'이 가지는 콜백 함수 활용
// : 메서드의 형태

// cf) Object.속성 / Object.메서드() >> 객체 내부의 기능과 동작을 사용
// - 메서드: 어딘가에 소속된 함수

// ? 배열의 콜백함수 형태
// 배열.메서드(콜백함수)
// : 콜백함수를 가지는 배열 메서드의 공통된 기능 '배열의 순회'
// : 콜백함수는 3가지 선언 형식 모두 사용 가능

// ? 배열의 콜백함수의 '인자값'
// function callback(value, index, array) {}
// 1) value: 배열에서 순회되는 각 요소의 값
// 2) index: 순회되는 각 요소의 인덱스 번호
// 3) array: 배열 그 자체

// >> 콜백함수의 인자값은 필수 x(주로 value만 사용)
// : 사용하지 않는 인자값은 생략 가능

// function(value) {}
// function(value, index) {}
// function(, index) {}
// function(,, array) {}

// ! 배열의 콜백함수 메서드
// & forEach()
// : 각 요소에 대해 동일한 함수 실행
// - 배열 내부의 요소를 매개변수로 사용하는 콜백함수 호출
// - 사용값 반환 x

console.log('====forEach====');

const numbers = [23, 41, 19, 4, 35];

// 배열명.forEach(각 요소에게 적용할 함수-콜백함수)
numbers.forEach(function(value, index) {
  console.log(`${index + 1}번째 요소: ${value}`);
});

// & map()
// : 배열의 각 요소에 대해 함수를 적용 '새로운 배열로 생성하여 반환'
// - 리턴값을 모아 새 배열 생성 후 반환
// >> map 적용 후 배열 요소의 개수 변화 x

console.log('==== map ====');
console.log(numbers); 

const newnumbers = numbers.map(function(value) {
  let square = value * value;
  return square;
});
console.log(newnumbers);

// cf) 화살표 함수 적용(+ 소괄호, 중괄호 생략)
const newArrowNums = numbers.map(value => value*value);
console.log(newArrowNums);

// & filter()
// : 콜백 함수의 리턴값이 ture인 요소만 모아서 '새로운 배열을 만드는 함수'
// >> 기존의 배열과 요소 수가 일치하지 않을 수도 있음

const basicArray = [0, 1, 2, 3, 4, 5];
const evenNumbers = basicArray.filter(value => value % 2 === 0);
const evenNumbers2 = basicArray.filter(function(value) {
  return value % 2 === 0;
});

console.log(`원래 배열 ${basicArray}`);
console.log(`짝수 배열 ${evenNumbers}`);

// === 배열을 활용한 콜백함수 예제 === //
let cars = ['audi', 'bmw', 'volvo', 'hyundai'];

cars.forEach(car => console.log(car));

// 전체 배열의 요소를 대문자로 변환
// : 문자열.toUpperCase();
let carsUpperCase = cars.map(function(car) {
  return car.toUpperCase();
});
console.log(carsUpperCase);
// [ 'AUDI', 'BMW', 'VOLVO', 'HYUNDAI' ]

// 전체 배열 요소 중 문자열 길이가 4보다 큰 요소만 반환
// : 문자열.length
let longNameCars = cars.filter(car => car.length > 4);
console.log(longNameCars);
// [ 'volvo', 'hyundai' ]

// ? cf) 메서드 체이닝
// : 메서드를 연속적으로 호출하는 프로그래밍 패턴
// > 어떤 메서드(기능)이 반환하는 값을 기반으로 또 다른 메서드를 줄줄이 사용하는 것

let numbersArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
// numbersArray의 값에서 '짝수만 선택', '해당 값들을 제곱', '콘솔에 출력'
numbersArray
  .filter(value => value % 2 === 0)
  .map(value => value * value)
  .forEach(value => console.log(value));